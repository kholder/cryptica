// Generated by CoffeeScript 1.3.3

/*
Rail Fence Transformation Cipher
@author Kirk Holder
*/


(function() {
  var RailFence, _ref;

  module.exports = (_ref = module.exports) != null ? _ref : this;

  module.exports = RailFence = (function() {
    var _buildEmptyFence, _drawZigZag, _sanitize;

    function RailFence() {
      this.message = '';
      this.cipher = '';
      this.decipher = '';
      this.rails = 0;
      this.offset = 0;
      this.fence = [];
    }

    RailFence.prototype.encrypt = function(message, rails, offset) {
      var col, row, _i, _j, _ref1, _ref2;
      if (offset == null) {
        offset = 0;
      }
      this.message = message;
      this.rails = rails;
      this.offset = offset % rails;
      this.fence = _drawZigZag.call(this);
      this.cipher = '';
      for (row = _i = 0, _ref1 = this.rails; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; row = 0 <= _ref1 ? ++_i : --_i) {
        for (col = _j = 0, _ref2 = this.message.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; col = 0 <= _ref2 ? ++_j : --_j) {
          this.cipher += this.fence[row][col];
        }
      }
      return this.cipher;
    };

    RailFence.prototype.decrypt = function(cipher, rails, offset) {
      var col, forward, index, row, _i, _j, _k, _l, _ref1, _ref2, _ref3, _ref4;
      if (offset == null) {
        offset = 0;
      }
      this.decipher = '';
      this.cipher = cipher;
      this.rails = rails;
      this.offset = offset % rails;
      this.fence = _buildEmptyFence(this.rails, this.cipher.length);
      this.message = '';
      for (_i = 0, _ref1 = this.cipher.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--) {
        this.message += 'X';
      }
      this.fence = _drawZigZag.call(this);
      index = 0;
      for (row = _j = 0, _ref2 = this.rails; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; row = 0 <= _ref2 ? ++_j : --_j) {
        for (col = _k = 0, _ref3 = this.cipher.length; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; col = 0 <= _ref3 ? ++_k : --_k) {
          if (this.fence[row][col] === 'X') {
            this.fence[row][col] = this.cipher.charAt(index);
            index++;
          }
        }
      }
      forward = true;
      row = this.offset;
      for (col = _l = 0, _ref4 = this.cipher.length; 0 <= _ref4 ? _l < _ref4 : _l > _ref4; col = 0 <= _ref4 ? ++_l : --_l) {
        this.decipher += this.fence[row][col];
        if (row === this.rails - 1) {
          forward = false;
        }
        if (row === 0) {
          forward = true;
        }
        if (!forward) {
          row--;
        } else {
          row++;
        }
      }
      return this.decipher;
    };

    _buildEmptyFence = function(rows, cols) {
      var fence, nest, _i, _j;
      fence = [];
      nest = [];
      for (_i = 0; 0 <= rows ? _i < rows : _i > rows; 0 <= rows ? _i++ : _i--) {
        nest = [];
        for (_j = 0; 0 <= cols ? _j < cols : _j > cols; 0 <= cols ? _j++ : _j--) {
          nest.push('');
        }
        fence.push(nest);
      }
      return fence;
    };

    _drawZigZag = function() {
      var col, fence, forward, row, _i, _ref1;
      fence = _buildEmptyFence(this.rails, this.message.length);
      forward = true;
      row = this.offset;
      for (col = _i = 0, _ref1 = this.message.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; col = 0 <= _ref1 ? ++_i : --_i) {
        fence[row][col] = this.message.charAt(col);
        if (row === this.rails - 1) {
          forward = false;
        }
        if (row === 0) {
          forward = true;
        }
        if (!forward) {
          row--;
        } else {
          row++;
        }
      }
      return fence;
    };

    _sanitize = function(txt) {
      return txt.toLocaleUpperCase().replace(/[^a-zA-Z-0-9+]/g, '');
    };

    return RailFence;

  })();

}).call(this);
