{"ts":1350536282957,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by CoffeeScript 1.3.3\n(function() {\n  var RailFence;\n\n  Rail(Fence(Transposition(Cipher)));\n\n  RailFence = (function() {\n\n    function RailFence() {\n      this.message = '';\n      this.rails = 0;\n      this.fence = [];\n      this.cipher = '';\n    }\n\n    /*\n        @param string message [required]\n        @param int    rails   [required]\n    */\n\n\n    RailFence.prototype.encode = function(message, rails) {\n      this.messgae = message;\n      this.rails = rails;\n      return this.cipher;\n    };\n\n    return RailFence;\n\n  })();\n\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":558}]],"length":558}
{"contributors":[],"silentsave":false,"ts":1350998478841,"patch":[[{"diffs":[[0,"3.3\n"],[-1,"(function() {\n  var RailFence;\n\n  Rail(Fence(Transposition(Cipher)));\n\n "],[1,"\n/*\nRail Fence Transposition Cipher\n@author Kirk Holder\n*/\n\n\n(function() {\n  var RailFence, _ref;\n\n  module.exports = (_ref = module.exports) != null ? _ref : this;\n\n  module.exports ="],[0," Rai"]],"start1":31,"start2":31,"length1":80,"length2":192},{"diffs":[[0,"tion() {"],[1,"\n    var _buildFence;"],[0,"\n\n    fu"]],"start1":237,"start2":237,"length1":16,"length2":37},{"diffs":[[0,"ssage = '';\n"],[1,"      this.cipher = '';\n"],[0,"      this.r"]],"start1":308,"start2":308,"length1":24,"length2":48},{"diffs":[[0,"    "],[-1,"  this.cipher = ''"],[1,"}\n\n    RailFence.prototype.encode = function(message, rails) {\n      this.message = message;\n      this.rails = rails;\n      return this.fence = _buildFence.call(this)"],[0,";\n    }"],[1,";"],[0,"\n\n    "],[-1,"/*\n        @param string message [required]\n        @param int    rails   [required]\n    */\n\n\n    RailFence.prototype.encode = function(message, rails) {\n      this.messgae = message;\n      this.rails = rails;\n      return this.cipher"],[1,"_buildFence = function() {\n      var col, fence, forward, nest, plain, row, _i, _j, _k, _ref1, _ref2, _ref3;\n      plain = this.message.toLocaleUpperCase().replace(/[^a-zA-Z-0-9+]/g, '');\n      fence = [];\n      nest = [];\n      for (_i = 0, _ref1 = this.rails; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--) {\n        nest = [];\n        for (_j = 0, _ref2 = plain.length; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; 0 <= _ref2 ? _j++ : _j--) {\n          nest.push('');\n        }\n        fence.push(nest);\n      }\n      forward = true;\n      row = 0;\n      for (col = _k = 0, _ref3 = plain.length; 0 <= _ref3 ? _k < _ref3 : _k > _ref3; col = 0 <= _ref3 ? ++_k : --_k) {\n        fence[row][col] = plain.charAt(col);\n        if (row === this.rails - 1) {\n          forward = false;\n        }\n        if (row === 0) {\n          forward = true;\n        }\n        if (!forward) {\n          row--;\n        } else {\n          row++;\n        }\n      }\n      return fence"],[0,";\n  "]],"start1":389,"start2":389,"length1":273,"length2":1162}]],"length":1604,"saved":false}
